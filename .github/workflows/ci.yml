name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.25'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download and verify dependencies
        run: make deps

      - name: Run formatting check
        run: |
          make fmt
          git diff --exit-code || (echo "Code is not formatted. Run 'make fmt' locally and commit changes." && exit 1)

      - name: Run go vet
        run: make vet

      - name: Run unit tests with coverage
        run: make test-cover

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          install-mode: "goinstall"
          args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [ linux ]
        goarch: [ amd64, arm64 ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p build
          go build -ldflags "-X main.version=$(git describe --tags --always --dirty)" \
            -o build/vault-dm-crypt-${{ matrix.goos }}-${{ matrix.goarch }} \
            ./cmd/vault-dm-crypt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vault-dm-crypt-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/vault-dm-crypt-${{ matrix.goos }}-${{ matrix.goarch }}

  debian-package:
    name: Build Debian Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for version detection

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper devscripts golang-go build-essential

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Update version in changelog
        run: |
          # Get version from git tag or describe
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          else
            # Try to get version from git describe
            if git describe --tags --abbrev=0 2>/dev/null; then
              # There are tags, use git describe
              VERSION=$(git describe --tags --always --dirty | sed 's/^v//')
              VERSION="${VERSION}-dev"
            else
              # No tags exist, create a valid version with commit info
              COMMIT_SHORT=$(git rev-parse --short HEAD)
              COMMIT_COUNT=$(git rev-list --count HEAD)
              VERSION="0.0.0+git${COMMIT_COUNT}.${COMMIT_SHORT}"
            fi
          fi

          # Ensure version starts with a digit (required for Debian)
          if ! [[ "$VERSION" =~ ^[0-9] ]]; then
            VERSION="0.0.0+${VERSION}"
          fi

          # Update debian changelog with the correct version
          DEBEMAIL="support@axonops.com" DEBFULLNAME="AxonOps" \
            dch --newversion "${VERSION}-1" --distribution unstable \
            --force-distribution "Build from git version ${VERSION}"

          echo "Building Debian package version: ${VERSION}-1"
          cat debian/changelog | head -n 5

      - name: Build Debian package
        run: make deb

      - name: Workaround for relative path to deb package
        run: |
          echo "artifacts_path=$(realpath ..)" >> $GITHUB_ENV

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: "${{ env.artifacts_path }}/vault-dm-crypt_*.deb"

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      vault:
        image: hashicorp/vault:latest
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: root-token
          VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
        options: --cap-add=IPC_LOCK
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install cryptsetup
        run: |
          sudo apt-get update
          sudo apt-get install -y cryptsetup

      - name: Run integration tests
        env:
          VAULT_ADDR: http://localhost:8200
          VAULT_TOKEN: root-token
        run: |
          go test -v ./test/integration/...

  release:
    name: Release
    needs: [ test, lint, build, debian-package ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Copy binaries
          cp artifacts/vault-dm-crypt-*/* release-assets/ 2>/dev/null || true
          # Copy Debian package
          cp artifacts/debian-package/*.deb release-assets/ 2>/dev/null || true
          # List assets for verification
          ls -la release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
